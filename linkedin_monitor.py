#!/usr/bin/env python3
"""
LinkedIn Monitor - Version Corrig√©e et Simplifi√©e
Syst√®me d'alerte robuste pour nouveaux posts LinkedIn
Version: 2.0 - Production Ready
"""

import requests
import csv
import time
import hashlib
import smtplib
import os
import sys
import re
import json
from datetime import datetime
from typing import List, Dict, Optional, NamedTuple
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from urllib.parse import quote
import traceback


class LinkedInPost(NamedTuple):
    """Structure d'un post LinkedIn d√©tect√©"""
    profile_name: str
    title: str
    description: str
    url: str
    detected_at: str


class LinkedInProfile:
    """Profil LinkedIn √† surveiller"""
    
    def __init__(self, url: str, name: str, last_hash: str = "", error_count: int = 0):
        self.url = self._normalize_url(url)
        self.name = name.strip()
        self.last_hash = last_hash.strip()
        self.error_count = error_count
        self.last_check = datetime.now().isoformat()
    
    def _normalize_url(self, url: str) -> str:
        """Normalise l'URL LinkedIn"""
        url = url.strip()
        
        # Assurer HTTPS
        if url.startswith('http://'):
            url = url.replace('http://', 'https://')
        elif not url.startswith('https://'):
            url = 'https://' + url
        
        # Ajouter posts pour les companies si pas pr√©sent
        if '/company/' in url and not url.endswith('/posts/') and not url.endswith('/posts'):
            if not url.endswith('/'):
                url += '/'
            url += 'posts/'
        
        return url
    
    def is_valid(self) -> bool:
        """V√©rifie si l'URL est valide"""
        patterns = [
            r'^https://www\.linkedin\.com/company/[^/]+/?(?:posts/?)?$',
            r'^https://www\.linkedin\.com/in/[^/]+/?$'
        ]
        return any(re.match(pattern, self.url) for pattern in patterns)
    
    def to_dict(self) -> Dict[str, str]:
        """Conversion en dictionnaire pour CSV"""
        return {
            'URL': self.url,
            'Name': self.name,
            'Last_Post_ID': self.last_hash,
            'Error_Count': str(self.error_count)
        }


class ContentExtractor:
    """Extracteur de contenu LinkedIn simplifi√© et robuste"""
    
    @staticmethod
    def extract_activity_hash(html_content: str, profile_name: str) -> Tuple[str, Optional[LinkedInPost]]:
        """Extrait un hash de l'activit√© et d√©tecte les nouveaux posts"""
        try:
            if not html_content or len(html_content) < 100:
                return f"empty_{int(time.time())}", None
            
            # Patterns de d√©tection d'activit√© LinkedIn
            activity_patterns = [
                r'data-urn="urn:li:activity:(\d+)"',
                r'activity-(\d+)',
                r'urn:li:activity:(\d+)',
                r'"activityUrn":"urn:li:activity:(\d+)"'
            ]
            
            activity_ids = []
            for pattern in activity_patterns:
                matches = re.findall(pattern, html_content)
                activity_ids.extend(matches)
            
            # Patterns de contenu de posts
            content_patterns = [
                r'<span[^>]*update-components-text[^>]*>([^<]{20,200})</span>',
                r'"text":"([^"]{20,200})"',
                r'<div[^>]*feed-shared-text[^>]*>([^<]{20,200})</div>'
            ]
            
            content_snippets = []
            for pattern in content_patterns:
                matches = re.findall(pattern, html_content, re.IGNORECASE)
                content_snippets.extend(matches[:3])  # Limiter √† 3 extraits
            
            # Cr√©er un hash bas√© sur le contenu d√©tect√©
            hash_content = ""
            
            if activity_ids:
                # Utiliser les IDs d'activit√© les plus r√©cents
                recent_ids = sorted(set(activity_ids), reverse=True)[:5]
                hash_content += "ids:" + ",".join(recent_ids)
            
            if content_snippets:
                # Nettoyer et ajouter les extraits de contenu
                clean_snippets = []
                for snippet in content_snippets:
                    clean = ContentExtractor._clean_text(snippet)
                    if len(clean) > 20:
                        clean_snippets.append(clean)
                
                hash_content += "content:" + "|".join(clean_snippets[:3])
            
            # Si aucun contenu d√©tect√©, utiliser une signature de la page
            if not hash_content:
                page_signature = re.findall(r'linkedin\.com/[^"\'>\s]+', html_content)[:5]
                hash_content = "signature:" + ",".join(page_signature)
            
            # G√©n√©rer le hash final
            content_hash = hashlib.sha256(hash_content.encode('utf-8')).hexdigest()[:16]
            
            # Cr√©er un post si du nouveau contenu est d√©tect√©
            new_post = None
            if content_snippets and activity_ids:
                latest_content = ContentExtractor._clean_text(content_snippets[0])
                latest_activity = activity_ids[0] if activity_ids else "unknown"
                
                post_url = f"https://www.linkedin.com/posts/activity-{latest_activity}"
                
                new_post = LinkedInPost(
                    profile_name=profile_name,
                    title=latest_content[:80] + "..." if len(latest_content) > 80 else latest_content,
                    description=f"Nouvelle publication de {profile_name}. {latest_content[:150]}...",
                    url=post_url,
                    detected_at=datetime.now().strftime('%d/%m/%Y √† %H:%M')
                )
            
            return content_hash, new_post
            
        except Exception as e:
            print(f"‚ùå Erreur extraction contenu: {e}")
            return f"error_{int(time.time())}", None
    
    @staticmethod
    def _clean_text(text: str) -> str:
        """Nettoie le texte extrait"""
        if not text:
            return ""
        
        # Supprimer balises HTML
        text = re.sub(r'<[^>]+>', '', text)
        
        # D√©coder entit√©s HTML communes
        html_entities = {
            '&amp;': '&', '&lt;': '<', '&gt;': '>',
            '&quot;': '"', '&#39;': "'", '&nbsp;': ' '
        }
        
        for entity, char in html_entities.items():
            text = text.replace(entity, char)
        
        # Nettoyer espaces
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text


class EmailNotifier:
    """Gestionnaire d'emails simplifi√©"""
    
    def __init__(self, sender_email: str, sender_password: str, recipient_email: str):
        self.sender_email = sender_email
        self.sender_password = sender_password
        self.recipient_email = recipient_email
    
    def send_notification(self, new_posts: List[LinkedInPost]) -> bool:
        """Envoie une notification pour les nouveaux posts"""
        try:
            if not new_posts:
                print("‚ÑπÔ∏è Aucun nouveau post - Pas d'email envoy√©")
                return True
            
            print(f"üìß Envoi notification pour {len(new_posts)} nouveau(x) post(s)...")
            
            # Cr√©er le message
            msg = MIMEMultipart('alternative')
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = f"üîî LinkedIn Alert - {len(new_posts)} nouveau(x) post(s)"
            
            # Contenu texte
            text_content = self._build_text_content(new_posts)
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            
            # Contenu HTML
            html_content = self._build_html_content(new_posts)
            html_part = MIMEText(html_content, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # Envoi via Gmail SMTP
            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            print(f"‚úÖ Email envoy√© avec succ√®s pour {len(new_posts)} post(s)")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur envoi email: {e}")
            return False
    
    def _build_text_content(self, posts: List[LinkedInPost]) -> str:
        """Construit le contenu texte de l'email"""
        content = f"""üîî NOUVEAUX POSTS LINKEDIN D√âTECT√âS

üìÖ Rapport du {datetime.now().strftime('%d/%m/%Y √† %H:%M UTC')}
üìä {len(posts)} nouveau(x) post(s) publi√©(s)

"""
        
        for i, post in enumerate(posts, 1):
            content += f"""--- POST #{i} ---
üë§ Profil: {post.profile_name}
üìù Titre: {post.title}
üìÑ Description: {post.description}
üîó URL: {post.url}
‚è∞ D√©tect√©: {post.detected_at}

"""
        
        content += """ü§ñ LinkedIn Monitor - Surveillance automatis√©e
Syst√®me d'alerte pour nouveaux posts LinkedIn"""
        
        return content
    
    def _build_html_content(self, posts: List[LinkedInPost]) -> str:
        """Construit le contenu HTML de l'email"""
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>LinkedIn Alert</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 700px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #0077b5; color: white; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 20px; }}
        .post {{ background: #f8f9fa; border-left: 4px solid #0077b5; margin: 15px 0; padding: 15px; border-radius: 5px; }}
        .footer {{ text-align: center; font-size: 12px; color: #666; margin-top: 30px; padding-top: 15px; border-top: 1px solid #ddd; }}
        .url {{ word-break: break-all; color: #0077b5; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîî Nouveaux Posts LinkedIn</h1>
        <p>{len(posts)} nouveau(x) post(s) d√©tect√©(s) le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}</p>
    </div>
"""
        
        for i, post in enumerate(posts, 1):
            html += f"""
    <div class="post">
        <h3>üìù POST #{i}: {post.profile_name}</h3>
        <p><strong>Titre:</strong> {post.title}</p>
        <p><strong>Description:</strong> {post.description}</p>
        <p><strong>URL:</strong> <a href="{post.url}" class="url" target="_blank">{post.url}</a></p>
        <p><strong>D√©tect√©:</strong> {post.detected_at}</p>
    </div>
"""
        
        html += """
    <div class="footer">
        <p><strong>ü§ñ LinkedIn Monitor</strong></p>
        <p>Syst√®me d'alerte automatis√© pour nouveaux posts LinkedIn</p>
    </div>
</body>
</html>
"""
        return html


class CSVManager:
    """Gestionnaire de fichiers CSV"""
    
    @staticmethod
    def load_profiles(csv_file: str) -> List[LinkedInProfile]:
        """Charge les profils depuis le fichier CSV"""
        try:
            if not os.path.exists(csv_file):
                print(f"‚ùå Fichier {csv_file} non trouv√©, cr√©ation par d√©faut...")
                return CSVManager._create_default_profiles(csv_file)
            
            profiles = []
            
            # Essayer diff√©rents encodages
            encodings = ['utf-8-sig', 'utf-8', 'iso-8859-1', 'cp1252']
            
            for encoding in encodings:
                try:
                    with open(csv_file, 'r', encoding=encoding, newline='') as file:
                        reader = csv.DictReader(file)
                        profiles = []
                        
                        for i, row in enumerate(reader, 1):
                            try:
                                url = str(row.get('URL', '')).strip()
                                name = str(row.get('Name', '')).strip()
                                last_hash = str(row.get('Last_Post_ID', '')).strip()
                                error_count = int(row.get('Error_Count', 0) or 0)
                                
                                if url and name:
                                    profile = LinkedInProfile(url, name, last_hash, error_count)
                                    if profile.is_valid():
                                        profiles.append(profile)
                                        print(f"‚úÖ Profil {i}: {name}")
                                    else:
                                        print(f"‚ö†Ô∏è Profil {i} invalide: {url}")
                                else:
                                    print(f"‚ö†Ô∏è Ligne {i}: donn√©es manquantes")
                                    
                            except Exception as e:
                                print(f"‚ùå Erreur ligne {i}: {e}")
                    
                    print(f"‚úÖ {len(profiles)} profils charg√©s (encodage: {encoding})")
                    return profiles
                    
                except UnicodeDecodeError:
                    continue
                except Exception as e:
                    print(f"‚ùå Erreur lecture {encoding}: {e}")
                    continue
            
            print("‚ùå Impossible de lire le fichier CSV")
            return CSVManager._create_default_profiles(csv_file)
            
        except Exception as e:
            print(f"‚ùå Erreur chargement CSV: {e}")
            return []
    
    @staticmethod
    def save_profiles(csv_file: str, profiles: List[LinkedInProfile]) -> bool:
        """Sauvegarde les profils dans le fichier CSV"""
        try:
            fieldnames = ['URL', 'Name', 'Last_Post_ID', 'Error_Count']
            
            with open(csv_file, 'w', encoding='utf-8-sig', newline='') as file:
                writer = csv.DictWriter(file, fieldnames=fieldnames)
                writer.writeheader()
                
                for profile in profiles:
                    writer.writerow(profile.to_dict())
            
            print(f"‚úÖ {len(profiles)} profils sauvegard√©s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde CSV: {e}")
            return False
    
    @staticmethod
    def _create_default_profiles(csv_file: str) -> List[LinkedInProfile]:
        """Cr√©e des profils par d√©faut"""
        defaults = [
            LinkedInProfile("https://www.linkedin.com/company/microsoft/posts/", "Microsoft"),
            LinkedInProfile("https://www.linkedin.com/company/google/posts/", "Google"),
            LinkedInProfile("https://www.linkedin.com/company/tesla-motors/posts/", "Tesla")
        ]
        
        CSVManager.save_profiles(csv_file, defaults)
        print(f"‚úÖ Fichier par d√©faut cr√©√© avec {len(defaults)} profils")
        return defaults


class WebScraper:
    """Scraper web robuste pour LinkedIn"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none'
        })
    
    def fetch_profile_content(self, url: str) -> Optional[str]:
        """R√©cup√®re le contenu d'un profil LinkedIn"""
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                print(f"üåê Requ√™te {attempt + 1}/{max_retries}: {url}")
                
                response = self.session.get(url, timeout=30)
                
                if response.status_code == 200:
                    print(f"‚úÖ Contenu r√©cup√©r√© ({len(response.text)} caract√®res)")
                    return response.text
                elif response.status_code == 429:
                    wait_time = 60 + (attempt * 30)
                    print(f"‚è∞ Rate limit (429), attente {wait_time}s...")
                    time.sleep(wait_time)
                elif response.status_code == 403:
                    print(f"üö´ Acc√®s refus√© (403) - LinkedIn bloque la requ√™te")
                    return None
                else:
                    print(f"‚ùå Erreur HTTP {response.status_code}")
                
            except requests.exceptions.Timeout:
                print(f"‚è∞ Timeout sur tentative {attempt + 1}")
            except requests.exceptions.RequestException as e:
                print(f"‚ùå Erreur requ√™te {attempt + 1}: {e}")
            
            if attempt < max_retries - 1:
                wait_time = 10 + (attempt * 10)
                print(f"‚è≥ Attente {wait_time}s avant retry...")
                time.sleep(wait_time)
        
        print("‚ùå √âchec r√©cup√©ration apr√®s tous les essais")
        return None


class LinkedInMonitor:
    """Agent principal de monitoring LinkedIn"""
    
    def __init__(self, csv_file: str = "linkedin_urls.csv"):
        self.csv_file = csv_file
        self.scraper = WebScraper()
        self.notifier = None
        self.stats = {
            'total': 0,
            'success': 0,
            'changes': 0,
            'new_posts': 0,
            'errors': 0
        }
    
    def setup_email(self) -> bool:
        """Configure les param√®tres email depuis les variables d'environnement"""
        try:
            sender_email = os.getenv('GMAIL_EMAIL', '').strip()
            sender_password = os.getenv('GMAIL_APP_PASSWORD', '').strip()
            recipient_email = os.getenv('RECIPIENT_EMAIL', '').strip()
            
            missing = []
            if not sender_email:
                missing.append('GMAIL_EMAIL')
            if not sender_password:
                missing.append('GMAIL_APP_PASSWORD')
            if not recipient_email:
                missing.append('RECIPIENT_EMAIL')
            
            if missing:
                print(f"‚ùå Variables manquantes: {', '.join(missing)}")
                return False
            
            self.notifier = EmailNotifier(sender_email, sender_password, recipient_email)
            print("‚úÖ Configuration email valid√©e")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur configuration email: {e}")
            return False
    
    def check_profile(self, profile: LinkedInProfile) -> Optional[LinkedInPost]:
        """V√©rifie un profil et d√©tecte les changements"""
        try:
            print(f"\nüîç V√©rification: {profile.name}")
            print(f"üîó URL: {profile.url}")
            
            # R√©cup√©rer le contenu
            content = self.scraper.fetch_profile_content(profile.url)
            if not content:
                profile.error_count += 1
                print(f"‚ùå Impossible de r√©cup√©rer le contenu")
                return None
            
            # Extraire le hash et d√©tecter les nouveaux posts
            current_hash, new_post = ContentExtractor.extract_activity_hash(content, profile.name)
            
            print(f"üìä Hash actuel: {current_hash}")
            print(f"üìä Hash pr√©c√©dent: {profile.last_hash}")
            
            # V√©rifier les changements
            if profile.last_hash != current_hash:
                print(f"üÜï CHANGEMENT D√âTECT√â!")
                profile.last_hash = current_hash
                profile.error_count = 0  # Reset errors on success
                self.stats['changes'] += 1
                
                if new_post:
                    print(f"üìù Nouveau post d√©tect√©: {new_post.title[:50]}...")
                    self.stats['new_posts'] += 1
                    return new_post
            else:
                print("‚ö™ Aucun changement")
                profile.error_count = 0  # Reset errors on success
            
            return None
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification {profile.name}: {e}")
            profile.error_count += 1
            return None
    
    def run(self) -> bool:
        """Lance le monitoring complet"""
        try:
            print("=" * 80)
            print("üöÄ LINKEDIN MONITORING - Version Corrig√©e")
            print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S UTC')}")
            print("=" * 80)
            
            # Configuration email
            if not self.setup_email():
                print("‚ùå Configuration email √©chou√©e")
                return False
            
            # Chargement des profils
            profiles = CSVManager.load_profiles(self.csv_file)
            if not profiles:
                print("‚ùå Aucun profil √† surveiller")
                return False
            
            self.stats['total'] = len(profiles)
            new_posts = []
            changes_made = False
            
            # V√©rification de chaque profil
            for i, profile in enumerate(profiles):
                try:
                    print(f"\n--- PROFIL {i+1}/{len(profiles)} ---")
                    
                    new_post = self.check_profile(profile)
                    
                    if new_post:
                        new_posts.append(new_post)
                        changes_made = True
                    
                    self.stats['success'] += 1
                    
                except Exception as e:
                    print(f"‚ùå Erreur traitement profil {i+1}: {e}")
                    self.stats['errors'] += 1
                
                # Pause entre les profils pour √©viter le rate limiting
                if i < len(profiles) - 1:
                    pause = 15 + (i % 3) * 5  # 15-25 secondes
                    print(f"‚è≥ Pause {pause}s...")
                    time.sleep(pause)
            
            # Sauvegarde si changements
            if changes_made:
                CSVManager.save_profiles(self.csv_file, profiles)
                print("\nüíæ Profils sauvegard√©s")
            
            # Envoi des notifications
            if new_posts:
                print(f"\nüìß Envoi notification pour {len(new_posts)} nouveau(x) post(s)...")
                if self.notifier.send_notification(new_posts):
                    print("‚úÖ Notifications envoy√©es")
                else:
                    print("‚ùå Erreur envoi notifications")
            else:
                print("\nüì≠ Aucun nouveau post d√©tect√©")
            
            # Rapport final
            self._print_final_report()
            
            return self.stats['success'] > 0
            
        except Exception as e:
            print(f"üí• ERREUR CRITIQUE: {e}")
            traceback.print_exc()
            return False
    
    def _print_final_report(self):
        """Affiche le rapport final"""
        print("\n" + "=" * 80)
        print("üìä RAPPORT FINAL")
        print("=" * 80)
        print(f"üìã Profils trait√©s: {self.stats['success']}/{self.stats['total']}")
        print(f"üÜï Changements d√©tect√©s: {self.stats['changes']}")
        print(f"üìù Nouveaux posts: {self.stats['new_posts']}")
        print(f"‚ùå Erreurs: {self.stats['errors']}")
        
        success_rate = (self.stats['success'] / self.stats['total'] * 100) if self.stats['total'] > 0 else 0
        print(f"üìà Taux de succ√®s: {success_rate:.1f}%")
        print("=" * 80)


def main():
    """Point d'entr√©e principal"""
    try:
        # Lancement du monitoring
        monitor = LinkedInMonitor()
        success = monitor.run()
        
        if success:
            print("\nüéâ MONITORING TERMIN√â AVEC SUCC√àS")
            sys.exit(0)
        else:
            print("\nüí• √âCHEC DU MONITORING")
            sys.exit(1)
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• ERREUR FATALE: {e}")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
