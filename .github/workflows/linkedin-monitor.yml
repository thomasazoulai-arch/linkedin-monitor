name: LinkedIn Monitor API v4.0 - Basic

on:
  schedule:
    - cron: '0 6,12,18,0 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Debug mode'
        required: false
        default: 'false'

permissions:
  contents: write
  actions: read

env:
  LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
  LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
  GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
  GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
  RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        echo "📦 Installation des dépendances..."
        pip install requests==2.31.0 python-dateutil==2.8.2
        echo "✅ Dépendances installées"
    
    - name: Debug LinkedIn Products
      run: |
        echo "🔍 Debug des produits LinkedIn disponibles..."
        echo "Client ID: ${LINKEDIN_CLIENT_ID:0:8}***"
        echo "Secret length: ${#LINKEDIN_CLIENT_SECRET}"
        
        echo "🧪 Test avec différentes permissions..."
        
        # Test 1: r_liteprofile (basique)
        echo "Test 1: r_liteprofile"
        curl -s -X POST https://www.linkedin.com/oauth/v2/accessToken \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$LINKEDIN_CLIENT_ID" \
          -d "client_secret=$LINKEDIN_CLIENT_SECRET" \
          -d "scope=r_liteprofile" \
          -w "Status: %{http_code}\n"
        
        echo ""
        
        # Test 2: r_organization_social (entreprises)
        echo "Test 2: r_organization_social"
        curl -s -X POST https://www.linkedin.com/oauth/v2/accessToken \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$LINKEDIN_CLIENT_ID" \
          -d "client_secret=$LINKEDIN_CLIENT_SECRET" \
          -d "scope=r_organization_social" \
          -w "Status: %{http_code}\n"
        
        echo ""
        
        # Test 3: w_member_social (partage)
        echo "Test 3: w_member_social"
        curl -s -X POST https://www.linkedin.com/oauth/v2/accessToken \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$LINKEDIN_CLIENT_ID" \
          -d "client_secret=$LINKEDIN_CLIENT_SECRET" \
          -d "scope=w_member_social" \
          -w "Status: %{http_code}\n"
        
        echo ""
        
        # Test 4: Sans scope spécifique
        echo "Test 4: Sans scope"
        curl -s -X POST https://www.linkedin.com/oauth/v2/accessToken \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$LINKEDIN_CLIENT_ID" \
          -d "client_secret=$LINKEDIN_CLIENT_SECRET" \
          -w "Status: %{http_code}\n"
    
    - name: Test LinkedIn API Access
      run: |
        echo "🔍 Test d'accès API LinkedIn..."
        
        # Essai d'authentification avec scope minimal
        TOKEN_RESPONSE=$(curl -s -X POST https://www.linkedin.com/oauth/v2/accessToken \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$LINKEDIN_CLIENT_ID" \
          -d "client_secret=$LINKEDIN_CLIENT_SECRET" \
          -d "scope=r_liteprofile")
        
        echo "Response: $TOKEN_RESPONSE"
        
        if echo "$TOKEN_RESPONSE" | grep -q "access_token"; then
          echo "✅ Token obtenu avec r_liteprofile"
          
          # Extraction du token
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
          echo "Token: ${ACCESS_TOKEN:0:20}..."
          
          # Test d'une requête simple
          echo "🧪 Test requête API..."
          curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "X-Restli-Protocol-Version: 2.0.0" \
            "https://api.linkedin.com/v2/me" \
            -w "Status: %{http_code}\n"
        else
          echo "❌ Impossible d'obtenir un token"
        fi
    
    - name: Check LinkedIn Developer Portal
      run: |
        echo "📋 INFORMATIONS IMPORTANTES:"
        echo "=========================================="
        echo "🔍 Vérifiez votre LinkedIn Developer App:"
        echo "1. Allez sur https://www.linkedin.com/developers/"
        echo "2. Cliquez sur votre app"
        echo "3. Onglet 'Products'"
        echo "4. Listez TOUS les produits disponibles"
        echo ""
        echo "Produits à chercher:"
        echo "✅ Sign In with LinkedIn"
        echo "🎯 Share on LinkedIn"
        echo "🎯 Advertising API"
        echo "🎯 Community Management API"
        echo "🎯 Content API"
        echo "🎯 Tout produit contenant 'Organization' ou 'Company'"
        echo ""
        echo "⚠️ Si aucun produit n'est 'Approved' (vert),"
        echo "   c'est normal pour une nouvelle app."
        echo "=========================================="
    
    - name: Send Debug Email
      run: |
        echo "📧 Envoi email de debug..."
        
        cat > debug_email.py << 'EOF'
        import smtplib, os
        from email.mime.text import MIMEText
        from datetime import datetime
        
        sender = os.getenv('GMAIL_EMAIL')
        password = os.getenv('GMAIL_APP_PASSWORD')
        recipient = os.getenv('RECIPIENT_EMAIL')
        
        if sender and password and recipient:
            msg = MIMEText(f"""
            🔍 LinkedIn API Debug Report
            
            Date: {datetime.now()}
            
            Status: En cours de configuration
            
            Actions requises:
            1. Vérifier les produits LinkedIn disponibles
            2. Approuver les permissions nécessaires
            3. Re-tester l'authentification
            
            Le système est prêt, il faut juste finaliser
            les permissions LinkedIn.
            
            LinkedIn Monitor v4.0
            """)
            
            msg['Subject'] = '🔍 LinkedIn API - Debug Report'
            msg['From'] = sender
            msg['To'] = recipient
            
            try:
                with smtplib.SMTP('smtp.gmail.com', 587) as server:
                    server.starttls()
                    server.login(sender, password)
                    server.send_message(msg)
                print("✅ Email debug envoyé")
            except Exception as e:
                print(f"❌ Erreur email: {e}")
        else:
            print("❌ Configuration email manquante")
        EOF
        
        python debug_email.py
    
    - name: Summary
      run: |
        echo "=========================================="
        echo "🔍 DIAGNOSTIC LINKEDIN API v4.0"
        echo "=========================================="
        echo "📅 $(date)"
        echo "🔑 Client ID: Configuré"
        echo "🔒 Client Secret: Configuré"
        echo "📧 Email: Configuration testée"
        echo ""
        echo "🎯 PROCHAINES ÉTAPES:"
        echo "1. Vérifiez les logs ci-dessus"
        echo "2. Consultez votre LinkedIn Developer App"
        echo "3. Activez les produits appropriés"
        echo "4. Re-testez le workflow"
        echo "=========================================="
