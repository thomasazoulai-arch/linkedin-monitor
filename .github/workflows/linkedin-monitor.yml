name: LinkedIn API Monitor v4.0
on:
  schedule:
    # Exécution optimisée chaque jour à 7h
    - cron: '0 7 * * *'
  workflow_dispatch:  # Exécution manuelle
    inputs:
      debug_mode:
        description: 'Activer le mode debug API'
        required: false
        default: 'false'
      force_auth:
        description: 'Forcer la réauthentification'
        required: false
        default: 'false'

# Permissions étendues pour API
permissions:
  contents: write
  actions: read
  id-token: write  # Pour l'authentification avancée

env:
  # Configuration API LinkedIn
  LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
  LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
  LINKEDIN_ACCESS_TOKEN: ${{ secrets.LINKEDIN_ACCESS_TOKEN }}
  
  # Configuration email
  GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
  GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
  RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
  
  # Configuration monitoring
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
  MAX_POSTS_PER_PROFILE: 10
  API_DELAY_SECONDS: 20

jobs:
  linkedin-api-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Timeout étendu pour API
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: 🐍 Setup Python avec Cache
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Version plus récente pour l'API
        cache: 'pip'
    
    - name: 📦 Install API Dependencies
      run: |
        echo "📦 Installation des dépendances API LinkedIn..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dépendances API installées avec succès"
    
    - name: 🔐 Validate API Configuration
      run: |
        echo "🔐 Validation de la configuration API LinkedIn..."
        
        # Vérification des variables obligatoires
        if [ -z "$LINKEDIN_CLIENT_ID" ]; then
          echo "❌ LINKEDIN_CLIENT_ID manquant"
          exit 1
        fi
        
        if [ -z "$LINKEDIN_CLIENT_SECRET" ]; then
          echo "❌ LINKEDIN_CLIENT_SECRET manquant"
          exit 1
        fi
        
        echo "✅ Configuration API valide"
        echo "🔑 Client ID: ${LINKEDIN_CLIENT_ID:0:8}***"
        echo "🔒 Client Secret: Configuré"
        echo "🎯 Token Access: ${LINKEDIN_ACCESS_TOKEN:+Fourni}"
    
    - name: 📊 Check Data Files
      run: |
        echo "📊 Vérification des fichiers de données..."
        
        if [ -f "linkedin_urls.csv" ]; then
          echo "✅ Fichier CSV existant:"
          head -3 linkedin_urls.csv
          echo "📈 Nombre de profils: $(( $(wc -l < linkedin_urls.csv) - 1 ))"
        else
          echo "🆕 Nouveau fichier CSV - sera créé avec profils par défaut"
        fi
        
        echo "📁 Espace disque disponible:"
        df -h . | head -2
    
    - name: 🚀 Run LinkedIn API Monitor
      run: |
        echo "🚀 Lancement du LinkedIn API Monitor v4.0..."
        echo "⚡ Mode: ${{ github.event.inputs.debug_mode == 'true' && 'DEBUG' || 'PRODUCTION' }}"
        echo "🔄 Réauth forcée: ${{ github.event.inputs.force_auth || 'false' }}"
        
        # Exécution avec gestion d'erreur robuste
        python linkedin_monitor.py 2>&1 | tee api_monitor.log
        
        # Vérification du résultat
        if [ $? -eq 0 ]; then
          echo "✅ Monitoring API exécuté avec succès"
        else
          echo "⚠️ Monitoring terminé avec avertissements"
        fi
    
    - name: 📈 API Usage Report
      run: |
        echo "📈 Rapport d'utilisation API LinkedIn..."
        
        if [ -f "api_monitor.log" ]; then
          echo "📊 Statistiques extraites du log:"
          
          # Extraction des métriques
          POSTS_FOUND=$(grep -c "posts API extraits" api_monitor.log || echo "0")
          API_CALLS=$(grep -c "API Check:" api_monitor.log || echo "0")
          ERRORS=$(grep -c "Erreur API" api_monitor.log || echo "0")
          
          echo "   🎯 Posts trouvés: $POSTS_FOUND"
          echo "   📡 Appels API: $API_CALLS"
          echo "   ❌ Erreurs: $ERRORS"
          
          # Calcul taux de réussite
          if [ "$API_CALLS" -gt 0 ]; then
            SUCCESS_RATE=$(( (API_CALLS - ERRORS) * 100 / API_CALLS ))
            echo "   📈 Taux de réussite: ${SUCCESS_RATE}%"
          fi
        fi
        
        echo "⏰ Prochaine exécution: $(date -d '+6 hours' '+%Y-%m-%d %H:%M UTC')"
    
    - name: 💾 Commit API Data Changes
      run: |
        echo "💾 Sauvegarde des données API..."
        
        # Configuration Git
        git config --local user.email "api-monitor@github.com"
        git config --local user.name "LinkedIn API Monitor v4.0"
        
        # Vérification des changements
        echo "📊 Statut avant commit:"
        git status --porcelain
        
        # Ajout des fichiers de données
        if [ -f "linkedin_urls.csv" ]; then
          git add linkedin_urls.csv
          echo "✅ CSV mis à jour"
        fi
        
        # Ajout du log si mode debug
        if [ "$DEBUG_MODE" = "true" ] && [ -f "api_monitor.log" ]; then
          git add api_monitor.log
          echo "🐛 Log debug ajouté"
        fi
        
        # Commit intelligent
        if ! git diff --staged --quiet; then
          echo "💾 Création du commit API..."
          
          # Pull des changements distants
          git pull origin ${{ github.ref_name }} --rebase || echo "ℹ️ Aucun changement distant"
          
          # Commit avec métadonnées enrichies
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          POSTS_COUNT=$(grep -c "posts authentiques extraits" api_monitor.log 2>/dev/null || echo "0")
          
          git commit -m "🚀 LinkedIn API Monitor v4.0 - Mise à jour [$TIMESTAMP]

🔥 Monitoring via API officielle LinkedIn:
📊 Posts authentiques détectés: $POSTS_COUNT
🔐 Authentification: OAuth 2.0
📡 API: LinkedIn v2 + UGC Posts
🎯 Extraction: Titres et descriptions authentiques
🎨 Notification: Email ultra-premium

🤖 Agent: GitHub Actions API Monitor
⚡ Version: 4.0 Révolutionnaire
🌍 Timestamp: $TIMESTAMP"
          
          # Push avec retry automatique
          echo "🚀 Push vers GitHub..."
          for i in {1..3}; do
            if git push origin ${{ github.ref_name }}; then
              echo "✅ Push API réussi (tentative $i)"
              break
            else
              echo "⚠️ Tentative $i échouée, retry dans 10s..."
              sleep 10
              git pull origin ${{ github.ref_name }} --rebase
            fi
          done
        else
          echo "📝 Aucune modification de données à committer"
        fi
